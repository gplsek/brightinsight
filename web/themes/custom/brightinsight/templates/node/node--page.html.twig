{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    node.bundle|clean_class,
    node.isPromoted() ? 'is-promoted',
    node.isSticky() ? 'is-sticky',
    not node.isPublished() ? 'is-unpublished',
    view_mode ? view_mode|clean_class,
    'clearfix',
  ]
%}

<!--/*
  Main HTML template for the banner component.

    CMS Options:

    Text Color:
      - black:    text-black
      - white:    text-white

    Background Color:
      - black:      bg-black
      - white:      bg-white
      - blue:      bg-blue
      - blue (muted):  bg-blue-muted
      - green:      bg-green
      - green (muted):  bg-green-muted
      - lime:      bg-lime
      - lime (muted):  bg-lime-muted
      - teal:      bg-teal
      - teal (muted):  bg-teal-muted
      - dark gray:    bg-dk-gray
      - medium gray:  bg-md-gray
      - gray:      bg-gray
      - light gray:    bg-lt-gray

    Background Image
      Help text: Recommended banner sizes are: Tall (1900x820), Medium (1900x570), Small (1900x270).

      (Note: If defined use bg-image class and style="background-image:url(...)" attribute.)

    Bottom Angle Color:
      - black:      bottom-angle-black
      - white:      bottom-angle-white
      - blue:      bottom-angle-blue
      - blue (muted):  bottom-angle-blue-muted
      - green:      bottom-angle-green
      - green (muted):  bottom-angle-green-muted
      - lime:      bottom-angle-lime
      - lime (muted):  bottom-angle-lime-muted
      - teal:      bottom-angle-teal
      - teal (muted):  bottom-angle-teal-muted
      - dark gray:    bottom-angle-dk-gray
      - medium gray:  bottom-angle-md-gray
      - gray:      bottom-angle-gray
      - light gray:    bottom-angle-lt-gray

      (Note: If not defined, use bottom-angle-white as the class.)

    Banner Height:
      - Tall:           component-banner-tall
      - Medium:         component-banner-medium
      - Short:          component-banner-short

    CTA Style:
      - Solid Green:    primary
      - Green Outline:  secondary
      - White Outline:  secondary-white

*/-->

<article{{ attributes.addClass(classes) }}>
  <!-- Variation: Tall banner, white text, white bottom angle, background image -->
  <section class="component-banner {{css.section_classes}} bg-image" style="background-image:url('{{ background }}')">
    <div class="container">
      <div class="row pad-top-lg pad-bot-lg">
        <div class="col-12 col-md-8 offset-md-2 col-lg-6 offset-lg-3">
          <header>
            <h1>{{ label }}</h1>
          </header>

          <div class="component-content">
            <div class="body">
              <p>{{ content.field_sub_headline }}</p>
            </div>
            <!-- If CTA -->
            {% if content.field_button_link.0 %}
              <div class="cta">
                <a class='component-cta {{css.cta_classes}}' href="{{ content.field_button_link.0 }}"><span>{{ content.field_button_text.0 }}</span></a>
              </div>
            {% endif %}
            <!-- end if -->
          </div>
        </div>
      </div>
    </div>
  </section>
 
  <div{{ content_attributes.addClass('content') }}>
    {{ content.field_paragraphblock }}
   <div class="container">
     {{ content.body}}
   </div>
  </div>

</article>




